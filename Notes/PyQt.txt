First we need to define application object:
  app = QtGui.QApplication(sys.argv)

To define new window use:
  w = QtGui.QWidget()
    With this object ("w") we can define properties of windows and enable it with:
      w.show()
    This is default constructor with no parent and so it creates new window.

QtGui.QWidget()
  Is base object for all user interface objects.

Some useful methods:
  self.setGeometry(300, 300, 250, 150)
  self.setWindowTitle('Icon')
  self.setWindowIcon(QtGui.QIcon('web..jpg'))

sys.exit(app.exec_())
  Mainloop.
  Event handling.
    Here system can dispatch event to application widgets.

Set font for tooltips:
  QtGui.QToolTip.setFont(QtGui.QFont('SansSerif', 10))
    This is static method.

To set new tooltip:
  self.setToolTip('This is a <b>QWidget</b> widget')
    Text is show when hovered on.

Create new button:
  btn = QtGui.QPushButton('Button', self)
  btn.setToolTip('This is a <b>QPushButton</b> widget')
  btn.resize(btn.sizeHint())
  btn.move(50, 50)
    Text is text shown on button and "self" is widget it belongs to.
  When button is pressed do something:
    qbtn.clicked.connect(QtCore.QCoreApplication.instance().quit)

Interaction with GUI is done over signal and events.
  After button is clicked signal is emitted.
    Main loop is in QtCore.QCoreApplication it processes events.

Modifying method "def closeEvent(self, event)" enable us do set custom behavior when closing window.
