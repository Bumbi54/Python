Order in which python executes arithmetic operations:
	1. Exponents and roots
	2. Multiplication and division
	3. Addition and subtraction

Interpreter stores most recent out in variable _ that can be used in later operations:
	1 + _

Compiling python script manually can be done using module py-compile. Compiling will create file with extension .pyc. This file is byte code of script which can be executed by python's virtual machine.
Compilation is hidden from users.
	In script:
		-python -m py_compile easy_to_write.py
	In command line:
		-import py_compile
		-py_compile.compile('scriptname.py')
	Compile all files in directory:
		- python -m compileall .

Python uses indentation to separate group statements. All continuous statements with same distance from edge (right) belong to same block of code. Statements line up vertically.
Statement can be continue to next line with character "\".

Declaration of variables is not required in Python.

Rules for naming identifiers:
	The start character can be the underscore "_" or a capital or lower case letter.
	The letters following the start character can be anything which is permitted as a start character plus the digits.
	Identifiers are case-sensitive!
	Python keywords are not allowed as identifier names!

Variables:
	For octal:
		010 = 8 or 0o10 = 8
	For hex:
		0xAOF = 2575
	Long integers (unlimited sizes):
		7800000000000000000000000000000000000000000000L
	Float:
		With dot ".": 45.25
		Scientific notation: 3-1415e-10
	String
		Indexed position in strings can't be changed.
		If string begins with three quote marks it extends to next lines till the next three quote marks.
			'''Prvi red
				Novi red
				zadnji red''
		String can be combined with "+":
			"Ivan" + "Drmic" = "Ivan Drmic"
		String can be repeated number of times with "*":
			"Hmm" * 3 = "HmmHmmHmm"
		Strings cna be sliced with [begin : end]:
			[2 : 3] - substring from character in position 2 to the character in position 3
		Variable type can be changed during the run of script.
		Two ways of naming variables:
			-camel case
			-underscore

Division of two integers in Python will produce float if used with true division - "/".

Escape character with "\".

When you are connecting sting with integer you need to cast integer to string with function:
	str(INT_VAR)

In Python following object are regarded as false:
	-numerical zero values (0, 0L, 0.0, 0.0+0.0j),
	-the Boolean value False,
	-empty strings,
	-empty lists and empty tuples,
	-empty dictionaries.
	-special value None.

Packet sys:
	Packet sys contains standard input (normally from keyboard), standard output and standard error.
		-sys.input
		-sys.putput
		-sys.error
	Added to script as import sys

While and for loops can have else statement
	If the loop is left by "break" else is not executed

Module "random"  can be used for generating random numbers:
	import random

For mathematical operation:
	import math

For iterating over list it is recommended to use:
	list[:] instead just "list"
		If user is using "list" and adds something into that same list loop will iterate over that new element as well.

The bytes object is a sequence of small integers. The elements of a byte object are in the range 0 through 255, corresponding to ASCII characters and they are printed as such.

Items in list don't have to have same type and are not fixed in size.
List are ordered and nested.
Tuple is immutable list (it can not be changed)
	Tuples are faster then lists.
	It protects data from changes.
	Can be used as keys in dictionaries as opposed to lists which can't.

Slicing:
	[0:5]
		Elements from "0" to "5".
	[5:]
		Elements from "5" to the end.
	[0:-5]
		Elements without last five.
	Third element can be used as a step value.

Lists:
	"append" puts and element to the end of the list.
	"pop" remove element from the end of the list. Can also take parameter as index on which element to remove.
	"extend" adds more then one elements (even entire lists) at the end of list as new elements and not as sublists.
	"remove" can remove specific element (first occurrence) in list with out knowing its index.
	"index" can find index of specific element.
	"insert" can add element to specific index.
	Use "+=" and DO NOT use "L = L + [4]"

To copy a list use slice operator:
	list2 = list1[:]
		Just by pointing one list to an other doesn't create new list but two names (variable) for the same list.
			CAREFULL:
				If list contains sublists only reference of that sublist will be copied even with slice operator.
					Check deepcopy for solution.

User can copy dictionary with function "copy":
	newDic = dic.copy()
		This is shallow copy.
Merge two dictionaries with:
	merge() function

To transform list to dictionary use:
	"zip()" function to merge two lists and create list iterator
		list(zip(countries, dishes))
	Cast list of tuples to dictionary with:
		dict(LIST_NAME)

Iterator exhaust themselves if used.

 A set contains an unordered collection of unique and immutable objects. 
